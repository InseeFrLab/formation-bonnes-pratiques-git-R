---
title: Bonnes pratiques pour les projets statistiques
subtitle: |
  **[Une formation aux bonnes pratiques avec Git et R]{.orange}**
author:
  - name: "[Lino Galiana](https://www.linogaliana.fr/)"
    affiliations:
      - Insee 
  - name: "Pierre Lamarche"
    affiliations:
      - Insee 
slide-number: true
footer: |
  Bonnes pratiques pour les projets statistiques ([retour au site principal](https://inseefrlab.github.io/formation-bonnes-pratiques-git-R/) ; [<i class="fa-brands fa-github"></i>](https://github.com/InseeFrLab/formation-bonnes-pratiques-git-R))
# uncomment for French presentations:
lang: fr-FR
# for blind readers:
slide-tone: false
# for @olevitt:
chalkboard: # press the B key to toggle chalkboard
  theme: whiteboard
# uncomment to use the multiplex mode:
#multiplex: true
format:
  # pick the light mode (onyxia-revealjs) or the dark mode (onyxia-dark-revealjs)
  onyxia-revealjs:
  #onyxia-dark-revealjs:
    output-file: manageurs.html
controls: true
css: custom.css
from: markdown+emoji
---



## Introduction

* Version pour les _manageurs_ de la formation
aux bonnes pratiques avec `R` et `Git`

![](https://inseefrlab.github.io/formation-bonnes-pratiques-git-R/cards/version-boss/falcon.png){fig-align="center"}

[_Retour √† la page d'accueil pour explorer les autres versions_](https://inseefrlab.github.io/formation-bonnes-pratiques-git-R/)


# Introduction

{{< include _intro.qmd >}}


## Vers un socle de bonnes pratiques ?

<br>

:one: [**Qualit√©**]{.orange} du code et [**structure**]{.orange} des projets

. . .

:two: Les [**formats de donn√©es**]{.orange} de diffusion


. . .

:three: Le [**contr√¥le de version**]{.orange}

. . .

:four: Normes de [**s√©curit√©**]{.orange}

. . .

:five: [**Ouverture**]{.orange}


# Partie 1 : Qualit√© du code et structure des projets

{{< include elements_r/_enjeux.qmd >}}


## :one: Adopter les standards communautaires {.smaller}

Deux outils pratiques aident √† respecter les standards :

1. [**_linter_**]{.orange} : programme qui v√©rifie que le code est __formellement__ conforme √† un certain _guidestyle_
    + signale probl√®mes formels, sans corriger 

. . .

2. [**_formatter_**]{.orange} : programme qui reformate un code pour le rendre conforme √† un certain _guidestyle_
    + modifie directement le code

::: {.callout-note}
Il existe un **guide de r√©f√©rence** pour bien coder en `R` : le [Tidyverse style guide](https://style.tidyverse.org/index.html).
:::


## :two: Favoriser la modularit√© des projets {.smaller}

::: {.incremental}
- Favoriser l‚Äôutilisation de [**fonctions**]{.orange}
  - [**Limite les risques d'erreur**]{.blue} li√©s aux copier/coller
  - Rend le code plus [**lisible**]{.blue} et plus [**compact**]{.blue}
  - [**Unicit√©**]{.blue} de la source de v√©rit√©

- Les [**packages**]{.orange}
  - Id√©al pour favoriser la [**r√©utilisation**]{.blue} du code
  - Co√ªt de [**maintenance**]{.blue} √©lev√©
:::


## :three: Documenter son code

{{< include elements_r/_3_documentation.qmd >}}

. . .

- Documenter le projet (contexte, objectifs, fonctionnement) dans un fichier `README`
  - Quelques mod√®les : [utilitR](https://github.com/InseeFrLab/utilitR/blob/master/README.md), [DoReMIFaSol](https://github.com/InseeFrLab/DoReMIFaSol)

# Partie 2: les formats de donn√©es

{{< include elements_git/_formats_data.qmd >}}


# Partie 3 : Le contr√¥le de version


{{< include elements_git/_1_2_pourquoi.qmd >}}

{{< include elements_git/_concepts.qmd >}}

{{< include elements_git/_bp_git.qmd >}}

## Ouverture vers la partie 4

Nous nous sommes concentr√©s sur les briques:

:::: {.columns}

::: {.column width="60%"}
* ["_Code R_"]{.blue2} 
* ["_Donn√©es_"]{.blue2}

:::

::: {.column width="40%"}
![](img/environment.png)
:::

::::

- Mais besoin d'aller plus loin:
    + ["_Code R_"]{.blue2} : besoin d'un environnement standardis√© (`renv`)
    + ["_Donn√©es_"]{.blue2}: enjeu de localisation (r√©seau, _cloud_, etc)
    + ["_Configuration_"]{.blue2}: enjeu de la s√©curit√©


# L'√©laboration d'une statistique

## Le cas d'usage classique √† l'Insee

Il faut distinguer deux types de processus de production :

- celui qui est [**enti√®rement automatis√©**]{.orange}, et o√π l'intervention humaine est limit√©e ;

. . .

- celui qui n√©cessite du [__travail humain post√©rieur__]{.orange} de la part du statisticien, et donc fait l'objet de t√¢tonnements
  + calcul du taux de pauvret√© avec [__ERFS et SRCV__]{.blue2} ;
  + micro-simulation avec le [__mod√®le INES__]{.blue2} ;
  + des processus de [__suivi conjoncturels__]{.blue2}...
  
## Pourquoi `Git` r√©pond-il bien aux enjeux de la production ? {.smaller}

::: {h4}
__Exemple avec calcul du taux de pauvret√© dans [SRCV]{.blue2}__
:::

<br>

Les t√¢tonnements supposent des allers et retours sur diff√©rentes hypoth√®ses :

- prise en compte √©volutive des ph√©nom√®nes affectant l'indicateur (d√©fiscalisation de revenus, nouvelles prestations sociales, etc.) ;
- production de diff√©rentes [__variantes__]{.orange} que l'on veut pouvoir comparer les unes aux autres ;
- comprendre ce qui a √©t√© fait pour les pr√©c√©dentes productions, √©ventuellement qui a fait quoi.

## Quels concepts ? {.smaller}

<br>

- les [__variantes__]{.orange} peuvent se d√©cliner sous la notion de [__branches__]{.orange} ;

. . .

- en tra√ßant l'ensemble des modifications du code, `Git` facilite la compl√®te [__reproductibilit√©__]{.orange} des t√¢tonnements ;

. . .

- au travers de l'[__historique__]{.orange}, il permet de retracer l'ensemble du cheminement ;

. . .

- le `git blame` permet de voir qui a fait quoi ;

. . .

- mais cela n√©cessite une [__discipline__]{.orange} sur l'usage de `Git`.

&#8658; deux notions essentielles : [__reproductibilit√©__]{.orange} et [__tra√ßabilit√©__]{.orange}

## Gestion du cycle de vie d'un projet

- [__Changement de paradigme__]{.blue2} : [**le code _self_ doit √™tre maintenu**]{.orange}
  * Changement de version de `R` et des _packages_ ;
  * Quelles solutions connaissez-vous ?

. . .

- `renv` et la notion de _lockfile_

. . .

- anticiper les mont√©es de version des logiciels : 
  + on peut envisager un protocole pour cela 

## Gestion du cycle de vie d'un projet: `renv`

Exemple de `renv.lock`  

<details>
<summary>
Observer la composition de ce fichier (100 premi√®res lignes)
</summary>
```{.yaml include="renvlockexample" filename="renv.lock" end-line=100}
```
</details>



::: {.callout-warning collapse="true"}
## Ce que `renv` √©vite

On retrouve parfois sur internet un code similaire √† celui-ci :

```r
# A ne pas reproduire chez vous üò®
if (!requireNamespace("dplyr", quietly = TRUE)) {
  install.packages("dplyr")
}
```

:::


## Gestion du cycle de vie d'un projet

- G√©rer le cycle de vie:
  - du [__code__]{.orange}
  - de son [__environnement d‚Äôex√©cution__]{.orange}
  - des [__donn√©es__]{.orange} mobilis√©es en entr√©e du projet et produites de mani√®re interm√©diaire.

. . .

- D√©finir responsabilit√©s et organisation √† la fois :
    + sur la maintenance du code ;
    + sur [gitlab.insee.fr](https://gitlab.insee.fr).


# Partie 4: Enjeux de s√©curit√©

## Question

::: {.callout-note title="Question"}

**Quels sont, selon vous, les principaux risques de s√©curit√© li√©s au d√©veloppement en self ?**

:::

## Risques üëÆ

- Mot de passe et jetons d'acc√®s √† des API  
  [**pas de mot de passe ni de jeton d'acc√®s √©crits dans le code**]{.orange}
- Risques sur les donn√©es :
  * **pas de donn√©es dans `Git`**
  * **pas de compte d'acc√®s commun √† des bases de donn√©es**
  * **pas de donn√©es sensibles en dehors des environnements prot√©g√©s**

## Jetons d'acc√®s √† des API

- une solution √† pr√©f√©rer au mot de passe (quand disponible)
- gestion fine des droits
- possibilit√© de r√©vocation des jetons
- peuvent √™tre limit√©s dans le temps
- mais qui pr√©sentent des risques identiques aux mots de passe si les jetons ont des droits √©lev√©s

## Les solutions concr√®tes pour les mots de passe

Notion de bo√Æte de dialogue qui permet d'entrer le mot de passe sans l'inscrire dans le code

```{.r code-line-numbers="12-18"}
library(DBI)
library(RPostgresInsee)
library(rjson)

## import des √©l√©ments de connexion

connexion_details <- fromJSON(file = "X:/HAB-LOGFIDELI/Production en self/conf_servers_fideli.json")

## connexion au clone

connexion_clone <- do.call(dbConnect, args = c(connexion_details$clone[2:4], 
                                               list(drv = Postgres(),
                                                    password = rstudioapi::askForPassword("Mot de passe :"))))
```

## R√©sultat : un prompt qui r√©cup√®re le mot de passe

![](img/motdepasse_rstudio.png){fig-align="center"}

## A utiliser avec un gestionnaire de mots de passe

`KeePass` ![](img/keepass.png){height=30 style="vertical-align: middle;"} :

- disponible dans le centre logiciel
- simple d'utilisation
- les mots de passe sont stock√©s dans un fichier `.kdbx` chiffr√©
- les fichiers `.kdbx` sont prot√©g√©s par un mot de passe ma√Ætre
- une aide √† la g√©n√©ration de mots de passe forts

## Droits d'acc√®s aux donn√©es

- ne pas utiliser de compte g√©n√©rique pour acc√©der √† des bases de donn√©es :
  * ne r√©pond pas aux exigences de tra√ßabilit√©
  * ne r√©pond pas aux exigences de r√©vocation des droits d'acc√®s
- pr√©f√©rer :
  * des comptes individuels
  * associ√©s √† une revue annuelle des droits

## Stockage des donn√©es

- Donn√©es sous forme de fichier :
  * ne pas les mettre sous `Git` (utiliser le fichier `.gitignore`)
  * veiller √† ce que les donn√©es sensibles ne prolif√®rent pas.
- Donn√©es dans des bases de donn√©es :
  * toujours se poser la question de l'opportunit√© de les dupliquer sous forme de fichier

On pr√©f√©rera toujours avoir des donn√©es stock√©es dans un unique espace pour lequel les droits d'acc√®s sont g√©r√©s individuellement.

# Partie 5: Collaboration et ouverture

## Quelques questions pour commencer

- Pour limiter les risques de s√©curit√©, vaut-il mieux cacher son code √† ses coll√®gues ?
- Quelle est la nature juridique des codes sources r√©alis√©s √† l'Insee ?
- `R`, `Python` et leurs _packages_ sont gratuits, comment est-ce possible ?
- Connaissez-vous la science ouverte et ses standards ?

## La s√©curit√© par l'obscurit√©

- Postulat : si on conserve ses codes sources secrets alors les failles de s√©curit√© seront plus difficiles √† d√©tecter
- Ce postulat s'est av√©r√© faux : 
  * des failles de s√©curit√© sont en permanence d√©tect√©es dans des logiciels propri√©taires
  * cela revient √† cacher la fiabilit√© r√©elle des processus mis en oeuvre
  * les logiciels open source sont examin√©s par de tr√®s nombreuses personnes et corrig√©s en cas de probl√®me

## Nature juridique des codes sources

- Les codes sources achev√©s (qui servent en production) ont le statut de document administratif
- Ils peuvent faire l'objet de demandes d'acc√®s
- En cas d'acc√®s, la publication doit se faire en open source
- Plut√¥t que de v√©rifier en catastrophe s'il y a des probl√®mes, autant s'y pr√©parer au fur et √† mesure

## Diff√©rents niveaux d'ouverture possibles

- On peut d√©j√† ouvrir les codes en interne au sein de l'Insee :
  * meilleure compr√©hension mutuelle des travaux
  * associ√© √† GitLab, un cadre id√©al pour la collaboration et la mutualisation

## Diff√©rents niveaux d'ouverture possibles

- Au-del√†, la publication de certains projets en _open source_ permet de valoriser le savoir-faire de l'Insee :
  - _Packages_ `R` : `disaggR`, `btb`, `RJDemetra`...
  - Eurostat syst√©matise l'open source pour les travaux europ√©ens
  - une n√©cessit√© pour ne pas passer pour un passager clandestin vis-√†-vis des communaut√©s open source
  - un moyen d'assurer la transparence de nos m√©thodes (cf. code des bonnes pratiques et les standards de la science ouverte)

**L'ensemble des bonnes pratiques qui ont √©t√© pr√©sent√©es sont issues de l'open source.**

