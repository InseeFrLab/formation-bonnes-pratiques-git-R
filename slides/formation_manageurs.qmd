---
title: Bonnes pratiques pour les projets statistiques
subtitle: |
  **[Une formation aux bonnes pratiques avec Git et R]{.orange}**
author:
  - name: "[Lino Galiana](https://www.linogaliana.fr/)"
    affiliations:
      - Insee 
  - name: "Pierre Lamarche"
    affiliations:
      - Insee 
slide-number: true
footer: |
  Bonnes pratiques pour les projets statistiques ([retour au site principal](https://inseefrlab.github.io/formation-bonnes-pratiques-git-R/) ; [<i class="fa-brands fa-github"></i>](https://github.com/InseeFrLab/formation-bonnes-pratiques-git-R))
# uncomment for French presentations:
lang: fr-FR
# for blind readers:
slide-tone: false
# for @olevitt:
chalkboard: # press the B key to toggle chalkboard
  theme: whiteboard
# uncomment to use the multiplex mode:
#multiplex: true
format:
  # pick the light mode (onyxia-revealjs) or the dark mode (onyxia-dark-revealjs)
  onyxia-revealjs:
    incremental: true
    output-file: manageurs.html
controls: true
css: custom.css
from: markdown+emoji
---



## Introduction

* Version pour les _manageurs_ de la formation
aux bonnes pratiques avec {{< fa brands r-project >}} et {{< fa brands git >}}

![](https://inseefrlab.github.io/formation-bonnes-pratiques-git-R/cards/version-boss/falcon.png){fig-align="center"}

[_Retour √† la page d'accueil pour explorer les autres versions_](https://inseefrlab.github.io/formation-bonnes-pratiques-git-R/)


# Introduction

## Pourquoi les bonnes pratiques ?

- [**Origine**]{.blue2} : communaut√© des d√©veloppeurs logiciels

- [**Constats**]{.blue2} :
    - le [_"code est plus souvent lu qu'√©crit"_]{.green2} ([Guido Van Rossum](https://fr.wikipedia.org/wiki/Guido_van_Rossum))
    - la maintenance d'un code est tr√®s co√ªteuse

- [**Cons√©quence**]{.blue2} : un ensemble de [**r√®gles informelles**]{.orange},
conventionnellement accept√©es comme produisant des logiciels [**fiables**]{.orange}, [**√©volutifs**]{.orange} et [**maintenables**]{.orange}


## Pourquoi int√©resser les statisticiens aux bonnes pratiques ? {.smaller}

<br>

L'activit√© du statisticien / *datascientist* tend √† se rapprocher de celle du d√©veloppeur :

- projets [**intenses en code**]{.orange}

- [**projets collaboratifs**]{.orange} et de grande envergure

- [**complexification**]{.orange} des donn√©es et donc des [**infrastructures**]{.orange}

- [**d√©ploiement**]{.orange} d'applications pour valoriser les analyses


## Pourquoi int√©resser les managers aux bonnes pratiques ? {.smaller}


- [__Projets en production__]{.orange} (automatis√©e ou ponctuelle) impliquent:
  - La [__coordination__]{.blue2} entre plusieurs acteurs (aux niveaux techniques diff√©rents)
  - La [__r√©p√©tition__]{.blue2} d'op√©rations dans le temps 
  - Des [__√©volutions__]{.blue2} sur des maillons de cha√Ænes, sans la d√©stabiliser

. . .

- Le tout dans un __[environnement changeant]{.orange}__ (donn√©es, infrastructures, √©quipes...)

. . .

- Bonnes pratiques ({{< fa brands git >}} et {{< fa brands r-project >}}): mani√®re de r√©duire le [__poids de la maintenance__]{.orange}
  - Sans brider la phase d'exp√©rimentation

. . .

- Erreur de ne pas penser ensemble les [__enjeux organisationnels, humains et techniques__]{.orange}
  - Derri√®re le sujet technique, opportunit√© pour faire √©voluer l'organisation...
  - ... pour produire des statistiques plus nombreuses, de meilleure qualit√©, en souffrant moins




eedd


## Enjeux de la formation bonnes pratiques {auto-animate=true}

Un point de d√©part commun

![](img/environment_messy.png)

## Enjeux de la formation bonnes pratiques {auto-animate=true}

Un point de d√©part commun ![](img/environment_messy.png){width="10%" fig-align="right"}


Une structuration de projet plus viable

![](img/environment_clean.png)


## Messages cl√©s de la formation aux agents

<br>

- Des [**standards communautaires**]{.orange} qui favorisent la [**reproductibilit√©**]{.blue2} et la [**maintenabilit√©**]{.blue2}

- De multiples [**outils**]{.orange} pour simplifier leur mise en oeuvre

- Un [**co√ªt**]{.orange} d'autant plus faible que l'on se place [**en amont**]{.orange}

- Le mouvement de [**modernisation du self**]{.orange} est l'occasion d'une [**mont√©e en comp√©tence collective**]{.blue2}


## Lignes directrices de la formation aux agents {.smaller}

<br>

* 1Ô∏è‚É£ [__Versionner__]{.orange} son projet pour historiciser et archiver proprement

. . .

* 2Ô∏è‚É£ Construire des [__codes de qualit√©__]{.orange} (lisibles, reproductibles, auto-document√©s...)

. . .

* 3Ô∏è‚É£ Adopter une [__structure modulaire__]{.orange} et √©volutive

. . .

* 4Ô∏è‚É£ Utiliser des [__formats de donn√©es__]{.orange} adapt√©s

. . .

* 5Ô∏è‚É£ Comment construire des [__environnements reproductibles__]{.orange} 

. . .

* 6Ô∏è‚É£ Enjeux de la  [__mise en production__]{.orange}  de projets statistiques


## Ressources communautaires {.smaller}

- [**Canaux de discussion**]{.orange}
    - A l'Insee
        - Pour toute question sur [**Git**]{.blue2} : [Insee-Git-Gitlab](https://tchap.gouv.fr/#/room/#InseeGitGitlablPtu8f1Frns:agent.finances.tchap.gouv.fr)
        - Pour toute question [**stat/self**]{.blue2} : [Insee - Outils Stats v2](https://tchap.gouv.fr/#/room/#InseeOutilsStatsv2wtxSdth:agent.finances.tchap.gouv.fr)
        - Pour toute question sp√©cifique √† [**AUS/LS3**]{.blue2} : [Insee-DSI-Plateformes-Internes-Datascience](https://matrix.to/#/!bxlTbQgAEcLkRjoNPi:agent.finances.tchap.gouv.fr?via=agent.finances.tchap.gouv.fr&via=agent.agriculture.tchap.gouv.fr&via=agent.interieur.tchap.gouv.fr)
    - Plus largement sur {{< fa brands r-project >}}
        - Sur `Tchap` : [Langage R (Tchap)](https://tchap.gouv.fr/#/room/#RdIezwNF:agent.finances.tchap.gouv.fr)
        - Sur `Slack` : [r-grrr](https://r-grrr.slack.com)

- [**Documentation**]{.orange} 
    - [Service datascience Insee](https://datascience.gitlab-pages.insee.fr/site-documentaire/accueil/)
    - [UtilitR](https://book.utilitr.org/)

- [**Formation**]{.orange}: [Espace formation du SSP Cloud](https://www.sspcloud.fr/formation)

- [**R√©seau data science**]{.orange}: [`SSPHub`](https://ssphub.netlify.app/)


## Plan

1. Pr√©sentation des enjeux avec des exemples concrets
2. Qualit√© et structure des projets
3. Pourquoi et comment faire du bon {{< fa brands git >}} ?
4. Format et s√©curit√© des donn√©es
5. Ouverture √† l'_open source_


# Illustration: l'√©laboration d'une statistique

## Le cas d'usage classique √† l'Insee

Il faut distinguer deux types de processus de production :

- celui qui est [**enti√®rement automatis√©**]{.orange}, et o√π l'intervention humaine est limit√©e ;


- celui qui n√©cessite du [__travail humain post√©rieur__]{.orange} de la part du statisticien, et donc fait l'objet de t√¢tonnements
  + calcul du taux de pauvret√© avec [__ERFS et SRCV__]{.blue2} ;
  + micro-simulation avec le [__mod√®le INES__]{.blue2} ;
  + des processus de [__suivi conjoncturels__]{.blue2}...
  
## Pourquoi {{< fa brands git >}} r√©pond-il bien aux enjeux de la production ? {.smaller}

::: {h4}
__Exemple avec calcul du taux de pauvret√© dans [SRCV]{.blue2}__
:::

<br>

Les t√¢tonnements supposent des allers et retours sur diff√©rentes hypoth√®ses :

- prise en compte √©volutive des ph√©nom√®nes affectant l'indicateur (d√©fiscalisation de revenus, nouvelles prestations sociales, etc.) ;
- production de diff√©rentes [__variantes__]{.orange} que l'on veut pouvoir comparer les unes aux autres ;
- comprendre ce qui a √©t√© fait pour les pr√©c√©dentes productions, √©ventuellement qui a fait quoi.

## Quels concepts ? {.smaller .nonincremental}

<br>

::: {.nonincremental}

- les [__variantes__]{.orange} peuvent se d√©cliner sous la notion de [__branches__]{.orange} ;


- en tra√ßant l'ensemble des modifications du code, {{< fa brands git >}} facilite la compl√®te [__reproductibilit√©__]{.orange} des t√¢tonnements ;


- au travers de l'[__historique__]{.orange}, il permet de retracer l'ensemble du cheminement ;


- le `git blame` permet de voir qui a fait quoi ;


- mais cela n√©cessite une [__discipline__]{.orange} sur l'usage de {{< fa brands git >}}.

:::

&#8658; deux notions essentielles : [__reproductibilit√©__]{.orange} et [__tra√ßabilit√©__]{.orange}

## Gestion du cycle de vie d'un projet

- [__Changement de paradigme__]{.blue2} : [**le code _self_ doit √™tre maintenu**]{.orange}
  * Changement de version de {{< fa brands r-project >}} et des _packages_ ;
  * Quelles solutions connaissez-vous ?


- `renv` et la notion de _lockfile_


- anticiper les mont√©es de version des logiciels : 
  + on peut envisager un protocole pour cela 

## Gestion du cycle de vie d'un projet: `renv`

Exemple de `renv.lock`  

<details>
<summary>
Observer la composition de ce fichier (100 premi√®res lignes)
</summary>
```{.yaml include="renvlockexample" filename="renv.lock" end-line=100}
```
</details>



::: {.callout-warning collapse="true"}
## Ce que `renv` √©vite

On retrouve parfois sur internet un code similaire √† celui-ci :

```r
# A ne pas reproduire chez vous üò®
if (!requireNamespace("dplyr", quietly = TRUE)) {
  install.packages("dplyr")
}
```

:::


## Gestion du cycle de vie d'un projet

- G√©rer le cycle de vie:
  - du [__code__]{.orange}
  - de son [__environnement d‚Äôex√©cution__]{.orange}
  - des [__donn√©es__]{.orange} mobilis√©es en entr√©e du projet et produites de mani√®re interm√©diaire.


- D√©finir responsabilit√©s et organisation √† la fois :
    + sur la maintenance du code ;
    + sur [gitlab.insee.fr](https://gitlab.insee.fr).


# Qualit√© du code et structure des projets


## Enjeux

- D'une vision utilitariste du code √† une vision du code comme [**outil de communication**]{.orange}

- Favoriser la [**lisibilit√©**]{.orange} et la [**maintenabilit√©**]{.orange}

- Assurer la [__transparence__]{.orange} m√©thodologique

- La [__modularit√©__]{.orange} pour √©viter les monolithes


## Les outils √† recommander aux agents {.smaller}

Deux outils pratiques aident √† respecter les standards :

1. [**_linter_**]{.orange} : programme qui v√©rifie que le code est __formellement__ conforme √† un certain _guidestyle_
    + signale probl√®mes formels, sans corriger 


2. [**_formatter_**]{.orange} : programme qui reformate un code pour le rendre conforme √† un certain _guidestyle_
    + modifie directement le code

::: {.callout-note}
Il existe un **guide de r√©f√©rence** pour bien coder en {{< fa brands r-project >}} : le [Tidyverse style guide](https://style.tidyverse.org/index.html).
:::


## La modularit√© des projets {.smaller}

- Favoriser l‚Äôutilisation de [**fonctions**]{.orange}
  - [**Limite les risques d'erreur**]{.blue} li√©s aux copier/coller
  - Rend le code plus [**lisible**]{.blue} et plus [**compact**]{.blue}
  - [**Unicit√©**]{.blue} de la source de v√©rit√©

- Les [**packages**]{.orange}
  - Id√©al pour favoriser la [**r√©utilisation**]{.blue} du code
  - Co√ªt de [**maintenance**]{.blue} √©lev√©


## Bien documenter

- Grands principes :
  - Documenter le [__pourquoi__]{.orange} plut√¥t que le [__comment__]{.orange}
  - Privil√©gier l'auto-documentation via des [**nommages pertinents**]{.orange}


- Documenter le projet (contexte, objectifs, fonctionnement) dans un fichier `README`
  - Quelques mod√®les : [utilitR](https://github.com/InseeFrLab/utilitR/blob/master/README.md), [DoReMIFaSol](https://github.com/InseeFrLab/DoReMIFaSol)


# Pourquoi et comment faire du bon `Git` ?


## :one: Archiver son code proprement {auto-animate=true}

pour en finir avec √ßa :

![](img/fichiers_multiples.png)


## :one: Archiver son code proprement {auto-animate=true}

ou √ßa :

![](img/finalfinal.png){fig-align="center"}


## :one: Archiver son code proprement {auto-animate=true}

ou encore √ßa :

```{.python code-line-numbers="12-18"}
prior <- read_csv(prior_path)
prior <- prior |>
    select(id, proba_inter, proba_build, proba_rfl) |>
    separate(id, into = c('nidt', 'grid_id'), sep = ":") |>
    group_by(nidt) |>
    mutate(
        proba_build = proba_build/sum(proba_build),
        proba_rfl = proba_rfl/sum(proba_rfl),
        ) |>
    unite(col = "id", nidt, grid_id, sep = ":")

# Test
# prior_test <- prior |>
#    mutate(
#        proba_inter = round(proba_inter, 4)
#        proba_build = round(proba_build, 4)
#        proba_rfl = round(proba_rfl, 4)
#    )

write_csv(prior_round, "~/prior.csv")
```

## :one: Archiver son code proprement {auto-animate=true}

Pour arriver √† √ßa :

![](img/timeline.png){fig-align="center" height=475}

Source : [ThinkR](https://thinkr.fr/travailler-avec-git-via-rstudio-et-versionner-son-code/)

## :two: Voyager dans le temps (de votre projet)

![](img/historique_utilitr.png){fig-align="center"}

## Concepts {auto-animate=true}

#### `Git`, `GitHub`, `GitLab`... quelles diff√©rences ?

- {{< fa brands git >}} est un **logiciel** ;
- Utilisation en ligne de commandes
- Diff√©rentes [__interfaces graphiques__]{.blue2} (`RStudio`, `VS Code`...)

## Concepts {auto-animate=true}

#### `Git`, `GitHub`, `GitLab`... quelles diff√©rences ?

- `GitHub` et `GitLab` sont des **forges logicielles**
- _Forge_: espace d'archivage de code
- Des fonctionalit√©s suppl√©mentaires : __r√©seau social du code__

:::{.callout-tip}

- `GitHub` : utilisation pour les projets **open-source**
- `GitLab` : utilisation pour les projets **internes**

:::

## Bonnes pratiques {auto-animate=true .smaller}

__Que versionne-t-on ?__

- Essentiellement du [**code source**]{.orange}
- [__Pas d'outputs__]{.orange} (fichiers `.html`, `.pdf`, mod√®les...)
- [__Pas de donn√©es__]{.orange}, d'informations locales ou sensibles

. . .

## Bonnes pratiques {auto-animate=true .smaller .nonincremental}

__Format des commits__

::: {layout="[40,60]"}

- [**Fr√©quence**]{.orange}
    - Aussi souvent que possible
    - Le lot de modifications doit "avoir du sens"
- [**Messages**]{.orange}
    - Courts et informatifs (comme un titre de mail)
    - D√©crire **le pourquoi plut√¥t que le comment** dans le texte

![](img/titre-commit.png)

:::


## Comment faire de la gestion de projets avec `Gitlab` ?

::: {.nonincremental}

- Allons voir un projet sur [`Gitlab` {{< fa brands gitlab >}}](https://gitlab.insee.fr/espace-charges-etudes/utilrp) !

:::


## Ouverture vers la suite

Nous nous sommes concentr√©s sur la brique:

:::: {.columns}

::: {.column width="60%"}
* ["_Code R_"]{.blue2} 

:::

::: {.column width="40%"}
![](img/environment_clean.png)
:::

::::

- Mais besoin d'aller plus loin:
    + ["_Code R_"]{.blue2} : besoin d'un environnement standardis√© (`renv`)
    + ["_Donn√©es_"]{.blue2}: enjeu du format et de la localisation (r√©seau, _cloud_, etc)
    + ["_Configuration_"]{.blue2}: enjeu de la s√©curit√©


# Bonnes pratiques relatives aux donn√©es

## Enjeux du choix d'un format

- Le choix d'un format de donn√©es r√©pond √† un [**arbitrage**]{.orange} entre plusieurs crit√®res :
  - [**Finalit√©**]{.blue2} (traitement, analyse, diffusion)
  - [**Public cible**]{.blue2}
  - [**Volum√©trie**]{.blue2}

## Recommandations de format {.smaller}

- Eviter imp√©rativement les formats de donn√©es adh√©rents √† un langage (`RDS`, `RData`, `fst`, `sas7bdat`, etc.).

- Deux formats √† privil√©gier :
  - [**CSV**]{.orange} : pour la [**plupart des usages courants**]{.blue2}
    - _Avantage_ : [**non-compress√©**]{.blue2} donc facilement [**lisible**]{.blue2}
    - _Inconv√©nients_ : pas de gestion des m√©ta-donn√©es, peu adapt√© aux donn√©es volumineuses
  - [**Parquet**]{.orange} : pour le traitement de [**donn√©es volumineuses**]{.blue2}
    - [**Compress√©**]{.blue2} et tr√®s [**performant**]{.blue2} en lecture/√©criture
    - Gestion native des m√©ta-donn√©es


## Recommandations de format {.smaller}

- Exemple sur les donn√©es du recensement:

![](img/tableau-perf-parquet.png){fig-align="center" height="500"}


## La s√©curit√©: question

::: {.callout-note title="Question"}

**Quels sont, selon vous, les principaux risques de s√©curit√© li√©s au d√©veloppement en self ?**

:::

## Risques üëÆ

- Mot de passe et jetons d'acc√®s √† des API  
  [**pas de mot de passe ni de jeton d'acc√®s √©crits dans le code**]{.orange}
- Risques sur les donn√©es :
  * **pas de donn√©es dans {{< fa brands git >}}**
  * **pas de compte d'acc√®s commun √† des bases de donn√©es**
  * **pas de donn√©es sensibles en dehors des environnements prot√©g√©s**

## Jetons d'acc√®s √† des API

- une solution √† pr√©f√©rer au mot de passe (quand disponible)
- gestion fine des droits
- possibilit√© de r√©vocation des jetons
- peuvent √™tre limit√©s dans le temps
- mais qui pr√©sentent des risques identiques aux mots de passe si les jetons ont des droits √©lev√©s

## Les solutions concr√®tes pour les mots de passe

Notion de bo√Æte de dialogue qui permet d'entrer le mot de passe sans l'inscrire dans le code

```{.r code-line-numbers="12-18"}
library(DBI)
library(RPostgresInsee)
library(rjson)

## import des √©l√©ments de connexion

connexion_details <- fromJSON(file = "X:/HAB-LOGFIDELI/Production en self/conf_servers_fideli.json")

## connexion au clone

connexion_clone <- do.call(dbConnect, args = c(connexion_details$clone[2:4], 
                                               list(drv = Postgres(),
                                                    password = rstudioapi::askForPassword("Mot de passe :"))))
```

## R√©sultat : un prompt qui r√©cup√®re le mot de passe

![](img/motdepasse_rstudio.png){fig-align="center"}

## A utiliser avec un gestionnaire de mots de passe

`KeePass` ![](img/keepass.png){height=30 style="vertical-align: middle;"} :

- disponible dans le centre logiciel
- simple d'utilisation
- les mots de passe sont stock√©s dans un fichier `.kdbx` chiffr√©
- les fichiers `.kdbx` sont prot√©g√©s par un mot de passe ma√Ætre
- une aide √† la g√©n√©ration de mots de passe forts

## Droits d'acc√®s aux donn√©es

- ne pas utiliser de compte g√©n√©rique pour acc√©der √† des bases de donn√©es :
  * ne r√©pond pas aux exigences de tra√ßabilit√©
  * ne r√©pond pas aux exigences de r√©vocation des droits d'acc√®s
- pr√©f√©rer :
  * des comptes individuels
  * associ√©s √† une revue annuelle des droits

## Stockage des donn√©es

- Donn√©es sous forme de fichier :
  * ne pas les mettre sous {{< fa brands git >}} (utiliser le fichier `.gitignore`)
  * veiller √† ce que les donn√©es sensibles ne prolif√®rent pas.
- Donn√©es dans des bases de donn√©es :
  * toujours se poser la question de l'opportunit√© de les dupliquer sous forme de fichier

On pr√©f√©rera toujours avoir des donn√©es stock√©es dans un unique espace pour lequel les droits d'acc√®s sont g√©r√©s individuellement.

# Partie 5: Collaboration et ouverture

## Quelques questions pour commencer

- Pour limiter les risques de s√©curit√©, vaut-il mieux cacher son code √† ses coll√®gues ?
- Quelle est la nature juridique des codes sources r√©alis√©s √† l'Insee ?
- {{< fa brands r-project >}}, {{< fa brands python >}} et leurs _packages_ sont gratuits, comment est-ce possible ?
- Connaissez-vous la science ouverte et ses standards ?

## La s√©curit√© par l'obscurit√©

- Postulat : si on conserve ses codes sources secrets alors les failles de s√©curit√© seront plus difficiles √† d√©tecter
- Ce postulat s'est av√©r√© faux : 
  * des failles de s√©curit√© sont en permanence d√©tect√©es dans des logiciels propri√©taires
  * cela revient √† cacher la fiabilit√© r√©elle des processus mis en oeuvre
  * les logiciels open source sont examin√©s par de tr√®s nombreuses personnes et corrig√©s en cas de probl√®me

## Nature juridique des codes sources

- Les codes sources achev√©s (qui servent en production) ont le statut de document administratif
- Ils peuvent faire l'objet de demandes d'acc√®s
- En cas d'acc√®s, la publication doit se faire en open source
- Plut√¥t que de v√©rifier en catastrophe s'il y a des probl√®mes, autant s'y pr√©parer au fur et √† mesure

## Diff√©rents niveaux d'ouverture possibles

- On peut d√©j√† ouvrir les codes en interne au sein de l'Insee :
  * meilleure compr√©hension mutuelle des travaux
  * associ√© √† GitLab, un cadre id√©al pour la collaboration et la mutualisation

## Diff√©rents niveaux d'ouverture possibles

- Au-del√†, la publication de certains projets en _open source_ permet de valoriser le savoir-faire de l'Insee :
  - _Packages_ {{< fa brands r-project >}} : `disaggR`, `btb`, `RJDemetra`...
  - Eurostat syst√©matise l'open source pour les travaux europ√©ens
  - une n√©cessit√© pour ne pas passer pour un passager clandestin vis-√†-vis des communaut√©s open source
  - un moyen d'assurer la transparence de nos m√©thodes (cf. code des bonnes pratiques et les standards de la science ouverte)

**L'ensemble des bonnes pratiques qui ont √©t√© pr√©sent√©es sont issues de l'open source.**

