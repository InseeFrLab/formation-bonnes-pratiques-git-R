{{< include applications_r/_application0.qmd >}}

# I- Qualité du code

## Enjeux

- D'une vision utilitariste du code à une vision du code comme [**outil de communication**]{.orange}

. . .

- Favoriser la [**lisibilité**]{.orange} et la [**maintenabilité**]{.orange}

. . .

- Faciliter la [**réutilisation**]{.orange}

. . .

- Assurer la [__transparence__]{.orange} méthodologique

## Principes généraux

1. Adopter les [**standards communautaires**]{.orange}

. . .

2. Utiliser des [**fonctions**]{.orange}

. . .

3. [**Documenter**]{.orange} son code

. . .

4. Indiquer les _packages_ utilisés afin d'éviter les [**conflits**]{.orange}


## :one: Adopter les standards communautaires

> *"Good coding style is like correct punctuation: you can manage without it, butitsuremakesthingseasiertoread"*
>
> [Tidyverse Style Guide](https://style.tidyverse.org/)

. . .

- Respecter les [conventions]{.orange} du langage dans lequel il est rédigé

. . .

- Il existe un **guide de référence** pour bien coder en `R` : le [Tidyverse style guide](https://style.tidyverse.org/index.html).


## :one: Adopter les standards communautaires {.smaller}

Deux outils pratiques aident à respecter les standards :

1. [**_linter_**]{.orange} : programme qui vérifie que le code est __formellement__ conforme à un certain _guidestyle_
    + signale problèmes formels, sans corriger 

. . .

2. [**_formatter_**]{.orange} : programme qui reformate un code pour le rendre conforme à un certain _guidestyle_
    + modifie directement le code

. . .

::: {.callout-tip}

- [Exemples d’erreurs repérées]{.blue2} par un _linter_ : 
    + lignes de code trop longues ou mal indentées, parenthèses non équilibrées, noms de fonctions mal construits…
- [Exemples d’erreurs __non__ repérées]{.blue2} par un _linter_ :
    + fonctions mal utilisées, arguments mal spécifiés, structure du code incohérente, code insuffisamment documenté…
:::


## :one: Adopter les standards communautaires {.smaller}

<br>

Dans le cas de {{< fa brands r-project >}} : 

- le [_linter_]{.orange} à utiliser est le _package_ [`lintr`](https://github.com/r-lib/lintr)
- le [_formatter_]{.orange} à utiliser est le _package_ [`styler`](https://github.com/r-lib/styler).
    + Existe également le _package_ [`formatR`](https://github.com/yihui/formatR).

## :two: Utiliser des fonctions {.smaller}

::: {.callout-important}
## Règle d'or

Il faut utiliser une [**fonction**]{.red2} dès qu'on utilise une même
portion de code plus de deux fois ([**_don't repeat yourself_ (DRY)**]{.red2})
:::

- [Limite les risques d'erreurs]{.orange} liés aux copier/coller
- Rend le code [plus lisible]{.orange} et [plus compact]{.orange}
- [Un seul endroit]{.orange} du code à modifier lorsqu'on souhaite modifier le traitement
- Facilite la [réutilisation]{.orange} et la [documentation]{.orange} du code !

. . .

::: {.callout-tip}
## Règles pour écrire des fonctions **pertinentes**

- Une tâche = une fonction
- Une tâche complexe = un enchaînement de fonctions réalisant chacune une tâche simple
- Limiter l'utilisation de variables globales.

:::

## :three: Documenter son code

- Grands principes :
  - Documenter le [__pourquoi__]{.orange} plutôt que le [__comment__]{.orange}
  - Privilégier l'auto-documentation via des [**nommages pertinents**]{.orange}.

. . .

::: {.callout-tip}
## Comment bien documenter un script ?

- [**Minimum**]{.orange} 🚦 : commentaire au début du script pour décrire ce qu'il fait
- [**Bien**]{.orange} 👍 : commenter les parties "délicates" du code
- [**Idéal**]{.orange} 💪 : documenter ses fonctions avec la syntaxe `roxygen2`.

:::


## :four: Pas d'ambiguïté sur les _packages_ utilisés {.smaller}

- Deux fonctions peuvent avoir le [__même nom__]{.orange} dans des [__packages différents__]{.orange}

. . .

- `R` utilise par défaut la librairie chargée le plus récemment

. . .

- Erreurs difficiles à repérer car il est nécessaire d'exécuter le code

. . .

- Recommandation : indiquer explicitement le _package_ : notation `package::fonction()`
    + Exemple : `dplyr::filter()`

:::{.callout-tip}
## Exemple
- `package1` et `package2` contiennent chacun une fonction appelée `superFonction`.
- Si `package2` est chargé après `package1`, alors `superFonction` désigne par défaut la fonction de `package2`.
- Mieux vaut noter `package1::superFonction` et `package2::superFonction`
:::


## Ressources supplémentaires

<br>

- [Un cours complet](https://eliocamp.github.io/reproducibility-with-r/) sur la reproductibilité avec `R`
- Une [présentation très complète](https://mitmat.github.io/slides/2022-05-26-egu/code-data-open-science.html#1) sur le partage de code et de données avec `R`
- L'équivalent `Python` en [3A d'ENSAE](https://ensae-reproductibilite.github.io/website/)


{{< include applications_r/_application1.qmd >}}


## Bilan

::: {.incremental}
- Un code mal structuré
  - Limite la lisibilité du projet
  - Est très coûteux à maintenir (dette technique)
:::

. . .

::: {layout="[80,30]"}

![](https://www.earthdatascience.org/images/earth-analytics/clean-code/reproducible-science-is-about-being-lazy-hadley-wickham.png)

:::

# II- Structure des projets

## Enjeux

1. Favoriser la [**lisibilité**]{.orange} et la [**maintenabilité**]{.orange}

. . .

2 Construire des projets [**reproductibles**]{.orange}

## :warning: A ne pas reproduire chez vous

<br>

```
├── report.Rmd
├── correlation.png
├── data.csv
├── data2.csv
├── fig1.png
├── figure 2 (copy).png
├── report.pdf
├── partial data.csv
├── script.R
└── script_final.R
```

Source : [eliocamp.github.io](https://eliocamp.github.io/reproducibility-with-r/materials/day1/02-projects/)

## Principes généraux

1. Utiliser les [**projets RStudio**]{.orange}

. . .

2. Organiser son projet en [**sous-dossiers**]{.orange}

. . .

3. Donner des [**noms pertinents**]{.orange} aux fichiers

. . .

4. [**Documenter**]{.orange} son projet

. . .

5. (Faire de son projet un [**package**]{.orange})

## :one: Utiliser les projets RStudio

::: {.incremental}
- [**Objectif**]{.orange} : favoriser la [**reproductibilité**]{.blue2}
  - Tous les fichiers nécessaires au projet dans un même dossier
  - Le dossier contenant le projet RStudio est automatiquement utilisé comme ***working directory***
  - Utilisation de [**chemins relatifs**]{.blue2} plutôt qu'absolus.
:::

. . .

- **Bonus** : en utilisant `Git`, on s'assure de toujours travailler dans un projet RStudio !

## :two: Organiser son projet en sous-dossiers

- [**Objectif**]{.orange} : adopter une structure arbitraire, mais [**lisible**]{.blue2} et [**cohérente**]{.blue2}

```
├── data
│   ├── raw
│   │   ├── data.csv
│   │   └── data2.csv
│   └── derived
│       └── partial data.csv
├── R
|   ├── script.R
│   ├── script_final.R
│   └── report.Rmd
└── output
    ├── fig1.png
    ├── figure 2 (copy).png
    ├── figure10.png
    ├── correlation.png
    └── report.pdf
```

## :three: Donner des noms pertinents aux fichiers

- [**Objectif**]{.orange} : [**auto-documenter**]{.blue2} son projet

```
├── data
│   ├── raw
│   │   ├── dpe_logement_202103.csv
│   │   └── dpe_logement_202003.csv
│   └── derived
│       └── dpe_logement_merged_preprocessed.csv
├── R
|   ├── preprocessing.R
│   ├── generate_plots.R
│   └── report.Rmd
└── output
    ├── histogram_energy_diagnostic.png
    ├── barplot_consumption_pcs.png
    ├── correlation_matrix.png
    └── report.pdf
```

## :four: Documenter son projet

- Le fichier `README.md`, situé à la racine du projet, est à la fois la **carte d'identité** et la **vitrine du projet**

::: {.incremental}
- Idéalement, il contient :
  - Une [**présentation**]{.orange} du contexte et des objectifs
  - Une description de son [**fonctionnement**]{.orange}
  - Un guide de [**contribution**]{.orange} (*open-source*)
:::

. . .

- Quelques modèles de `README.md` complets :
  - [utilitR](https://github.com/InseeFrLab/utilitR/blob/master/README.md)
  - [DoReMIFaSol](https://github.com/InseeFrLab/DoReMIFaSol)

## :five: Faire de son projet un *package*

::: {.incremental}
- Un *package* est la forme maximale de [**modularité**]{.orange}
  - Contient des [**fonctions**]{.blue2} rangées dans des [**modules**]{.blue2}
  - Contient également de la [**documentation**]{.blue2}, des [**tests**]{.blue2}, des (méta-)données... 

- [**Avantages**]{.orange}
  - Idéal pour favoriser la [**réutilisation**]{.blue2} du code
  - Des [**outils**]{.blue2} de développement : `devtools` et `usethis`

- [**Inconvénients**]{.orange}
  - Coût de [**maintenance**]{.blue2} élevé
:::

## Ressources supplémentaires

<br>

- La documentation utilitR sur les [projets RStudio](https://www.book.utilitr.org/03_fiches_thematiques/fiche_rprojects) et les [packages R](https://www.book.utilitr.org/01_r_insee/fiche_installer_packages)
- La [bible des packages R](https://r-pkgs.org/whole-game.html)
- Un excellent [workshop sur la reproductibilité avec R](https://eliocamp.github.io/reproducibility-with-r/materials/day1/02-projects/)


{{< include applications_r/_application2.qmd >}}


# III- Formats de données

## Enjeux

::: {.incremental}
- Le choix d'un format de données répond à un [**arbitrage**]{.orange} entre plusieurs critères :
  - [**Finalité**]{.blue2} (traitement, analyse, diffusion)
  - [**Public cible**]{.blue2}
  - [**Volumétrie**]{.blue2}
:::

## Recommandations {.smaller}

- Eviter impérativement les formats de données adhérents à un langage (`RDS`, `RData`, `fst`, `sas7bdat`, etc.).

::: {.incremental}
- Deux formats à privilégier :
  - [**CSV**]{.orange} : pour la [**plupart des usages courants**]{.blue2}
    - _Avantage_ : [**non-compressé**]{.blue2} donc facilement [**lisible**]{.blue2}
    - _Inconvénients_ : pas de gestion des méta-données, peu adapté aux données volumineuses
  - [**Parquet**]{.orange} : pour le traitement de [**données volumineuses**]{.blue2}
    - [**Compressé**]{.blue2} et très [**performant**]{.blue2} en lecture/écriture
    - Gestion native des méta-données
:::


{{< include applications_r/_application3.qmd >}}
