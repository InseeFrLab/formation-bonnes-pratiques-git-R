# I- Le contrôle de version : pourquoi faire ?

{{< include elements_git/_1_2_pourquoi.qmd >}}

## :three: Une collaboration simplifiée et efficace {auto-animate=true}

Un modèle distribué

![](img/git_distributed.png){fig-align="center" height=475}

Source : [specbee.com](https://www.specbee.com)


## :three: Une collaboration simplifiée et efficace {auto-animate=true}

Qui permet l'expérimentation en toute sécurité

![](img/branches.png){fig-align="center"}

Source : [lutece.paris.fr](https://lutece.paris.fr/support/jsp/site/Portal.jsp?page=wiki&view=page&page_name=git&language=fr)

## :three: Une collaboration simplifiée et efficace {auto-animate=true}

Quel que soit l'environnement de travail

![](img/envtravail.png){fig-align="center" height=475}

## :three: Une collaboration simplifiée et efficace {auto-animate=true}

Avec des outils pour faciliter la collaboration

![](img/issue.png){fig-align="center" height=500}

## :four: Partager son code à un public large {auto-animate=true}

Une vitrine pour les projets et l'organisation

![](img/ghinseefr.png){fig-align="center" height=475}


## En résumé

- [__Construire__]{.blue2} et [__naviguer__]{.blue2} à travers l'[**historique**]{.orange} de son projet

. . .

- La [**collaboration**]{.orange} rendue [__simple__]{.blue2} et [__efficace__]{.blue2}

. . .

- Améliorer la [**reproductibilité**]{.orange} de ses projets

. . .

- Améliorer la [**visibilité**]{.orange} de ses projets

# II- Le contrôle de version avec `Git`

## :warning: Git est complexe {auto-animate=true}

L'utilisation de `Git` nécessite [__certaines notions préalables__]{.orange}:

::: {.incremental}
- Fonctionnement d'un `filesystem`
- Connaissance basique du terminal `Linux`
- Potentiellement, un grand nombre de commandes
:::

![Source : [Ici](https://iulianacosmina.com/?p=19452)](img/gitfire.png){height="400"}

## :warning: Git est complexe {auto-animate=true}

[__Mais__]{.blue2}

::: {.incremental}
- L'**usage quotidien** n'implique que [**quelques commandes**]{.orange}
- Lors de chaque action, Git renvoie un [**message**]{.orange} qui indique s'il y a eu problème (il faut lire les messages de Git!)
- [**Enormément de ressources**]{.orange} disponibles sur internet
- Des [**interfaces visuelles**]{.orange} (ex: `RStudio`, `Sublime Merge`, `VS Code`) qui facilitent l'apprentissage
- Un petit investissement individuel pour de [**gros gains collectifs**]{.orange}
:::


{{< include elements_git/_concepts.qmd >}}


## Concepts {auto-animate=true}

#### Dépôt local / dépôt distant (`remote`)

![](img/localremote.png){fig-align="center" height=400}

- Par défaut, le dépôt distant porte l'alias `origin`

<!-- ## Concepts {auto-animate=true}

_Workflow_ (version littéraire) :

- On travaille sur un dépôt local en éditant des fichiers
- On dit à `Git` que ces fichiers doivent être suivis (`staging area`)
- On valide les modifications faites en local (`commit`)
- On soumet les modifications (`push`) après avoir récupéré la version collective (`pull`) -->

## Concepts {auto-animate=true}

#### _Workflow_ local

![](img/areas.png){fig-align="center" height=400}

Source : [Git Documentation](https://git-scm.com/book/en/v2/Getting-Started-What-is-Git%3F)

## Concepts {auto-animate=true}

#### _Workflow_ complet

![Source : [itnext.io](https://itnext.io/git-concepts-for-newcomers-part-2-git-repository-working-tree-and-staging-area-a2e720bf3528)](img/completeworkflow.png){height="400" width="500"}

## Commandes essentielles {auto-animate=true}

<br> 

| Action     | Commande      |
|------------|---------------|
| Cloner un projet | `git clone [url-to-git-repo]` |
| Afficher les changements | `git status` |
| Retrouver l'URL du dépôt distant | `git remote -v` |

## Commandes essentielles {auto-animate=true .smaller}

<br>

| Action     | Commande      |
|------------|---------------|
| Ajouter des changements à l'index de `Git` (_stage fixes_) | Un seul fichier : `git add <file-name>` <br> Tous les fichiers déjà indexés : `git add -u` <br> Tous les fichiers :warning: : `git add -A` |

<br>

:::{.callout-important}
## Warning

La méthode `git add -A` peut amener à suivre les modifications
de fichiers qui ne devraient pas l'être (par exemple, des données).

Il est recommandé de bien réfléchir avant de l'utiliser (ou d'avoir
un bon `.gitignore`)

:::

## Commandes essentielles {auto-animate=true}

<br>

| Action     | Commande      |
|------------|---------------|
| Faire un `commit` | `git commit -m "message"`|
| Pousser les changements locaux vers le dépôt distant (branche `master`) | `git push origin master` |
| Récupérer les changements sur le dépôt distant (branche `master`) | `git pull origin master` |

## Modes d'authentification

::: {.panel-tabset}

## {{< fa brands github >}}

:::{.incremental}
- [**https**]{.orange}
  - `git clone https://github.com/username/projet.git`
  - simple à utiliser
  - authentification username + password (ou token) à chaque *push*

- [**ssh**]{.orange}
  - `git clone git@github.com:username/projet.git`
  - (plus) complexe à initialiser
  - authentification automatique 
:::

## {{< fa brands gitlab >}} insee

::: {style="font-size: 75%;"}

:::{.incremental }

- [**https**]{.orange}
  - `git clone https://gitlab.insee.fr/username_or_groupname/projet.git`
  - simple à utiliser
  - authentification username + password (ou token) à chaque *push*

- [**ssh**]{.orange}
  - `git clone git@gitlab.insee.fr:username_or_groupname/projet.git`
  - (plus) complexe à initialiser
  - authentification automatique 
:::

:::

:::

## Application 0 {.smaller}

{{< include applications_git/_application0.qmd >}}

## Application 1 {.smaller}

{{< include applications_git/_application1.qmd >}}

## Application 2

{{< include applications_git/_application2.qmd >}}

{{< include elements_git/_bp_git.qmd >}}

## Application 3

{{< include applications_git/_application3.qmd >}}
