# I- Le contrôle de version : pourquoi faire ?

## :one: Archiver son code proprement {auto-animate=true}

pour en finir avec ça :

![](img/fichiers_multiples.png)


## :one: Archiver son code proprement {auto-animate=true}

ou ça :

![](img/finalfinal.png){fig-align="center"}


## :one: Archiver son code proprement {auto-animate=true}

ou encore ça :

```{.python code-line-numbers="12-18"}
prior <- read_csv(prior_path)
prior <- prior %>%
    select(id, proba_inter, proba_build, proba_rfl) %>%
    separate(id, into = c('nidt', 'grid_id'), sep = ":") %>%
    group_by(nidt) %>%
    mutate(
        proba_build = proba_build/sum(proba_build),
        proba_rfl = proba_rfl/sum(proba_rfl),
        ) %>%
    unite(col = "id", nidt, grid_id, sep = ":")

# Test
# prior_test <- prior %>%
#    mutate(
#        proba_inter = round(proba_inter, 4)
#        proba_build = round(proba_build, 4)
#        proba_rfl = round(proba_rfl, 4)
#    )

write_csv(prior_round, "~/prior.csv")
```

## :one: Archiver son code proprement {auto-animate=true}

Pour arriver à ça :

![](img/timeline.png){fig-align="center" height=475}

Source : [ThinkR](https://thinkr.fr/travailler-avec-git-via-rstudio-et-versionner-son-code/)

## :two: Voyager dans le temps (de votre projet)

![](img/historique_utilitr.png){fig-align="center"}

## :three: Une collaboration simplifiée et efficace {auto-animate=true}

Un modèle distribué

![](img/git_distributed.png){fig-align="center" height=475}

Source : [specbee.com](https://www.specbee.com)


## :three: Une collaboration simplifiée et efficace {auto-animate=true}

Qui permet l'expérimentation en toute sécurité

![](img/branches.png){fig-align="center"}

Source : [lutece.paris.fr](https://lutece.paris.fr/support/jsp/site/Portal.jsp?page=wiki&view=page&page_name=git&language=fr)

## :three: Une collaboration simplifiée et efficace {auto-animate=true}

Quel que soit l'environnement de travail

![](img/envtravail.png){fig-align="center" height=475}

## :three: Une collaboration simplifiée et efficace {auto-animate=true}

Avec des outils pour faciliter la collaboration

![](img/issue.png){fig-align="center" height=500}

## :four: Partager son code à un public large {auto-animate=true}

Une vitrine pour les projets et l'organisation

![](img/ghinseefr.png){fig-align="center" height=475}


## En résumé

- [__Construire__]{.blue2} et [__naviguer__]{.blue2} à travers l'[**historique**]{.orange} de son projet


- La [**collaboration**]{.orange} rendue [__simple__]{.blue2} et [__efficace__]{.blue2}


- Améliorer la [**reproductibilité**]{.orange} de ses projets


- Améliorer la [**visibilité**]{.orange} de ses projets

# II- Le contrôle de version avec `Git`

## :warning: Git est complexe {auto-animate=true}

L'utilisation de `Git` nécessite [__certaines notions préalables__]{.orange}:

- Fonctionnement d'un `filesystem`
- Connaissance basique du terminal `Linux`
- Potentiellement, un grand nombre de commandes

. . .

![Source : [iulianacosmina.com](https://iulianacosmina.com/?p=19452)](img/gitfire.png){height="300"}

## :warning: Git est complexe {auto-animate=true}

[__Mais__]{.blue2}

- L'**usage quotidien** n'implique que [**quelques commandes**]{.orange}
- Les [**messages**]{.orange} de `Git` sont très informatifs
- Enormément de [**ressources**]{.orange} disponibles sur internet
- Des [**interfaces visuelles**]{.orange} (ex: `RStudio`, `Sublime Merge`, `VS Code`) qui facilitent l'apprentissage
- Un petit investissement individuel pour de [**gros gains collectifs**]{.orange}


## Concepts {auto-animate=true}

#### `Git`, `GitHub`, `GitLab`... quelles différences ?

- `Git` est un **logiciel** ;
- Utilisation en ligne de commandes
- Différentes [__interfaces graphiques__]{.blue2} (`RStudio`, `VS Code`...)

## Concepts {auto-animate=true}

#### `Git`, `GitHub`, `GitLab`... quelles différences ?

- `GitHub` et `GitLab` sont des **forges logicielles**
- _Forge_: espace d'archivage de code
- Des fonctionalités supplémentaires : __réseau social du code__

:::{.callout-tip}

- `GitHub` : utilisation pour les projets **open-source**
- `GitLab` : utilisation pour les projets **internes**

:::


## Concepts {auto-animate=true}

#### Dépôt local / dépôt distant (`remote`)

![](img/localremote.png){fig-align="center" height=400}

- Par défaut, le dépôt distant porte l'alias `origin`

<!-- ## Concepts {auto-animate=true}

_Workflow_ (version littéraire) :

- On travaille sur un dépôt local en éditant des fichiers
- On dit à `Git` que ces fichiers doivent être suivis (`staging area`)
- On valide les modifications faites en local (`commit`)
- On soumet les modifications (`push`) après avoir récupéré la version collective (`pull`) -->

## Concepts {auto-animate=true}

#### _Workflow_ local

![](img/areas.png){fig-align="center" height=400}

Source : [Git Documentation](https://git-scm.com/book/en/v2/Getting-Started-What-is-Git%3F)

## Concepts {auto-animate=true}

#### _Workflow_ complet

![Source : [itnext.io](https://itnext.io/git-concepts-for-newcomers-part-2-git-repository-working-tree-and-staging-area-a2e720bf3528)](img/completeworkflow.png){height="400" width="500"}

## Commandes essentielles {auto-animate=true}

<br> 

| Action     | Commande      |
|------------|---------------|
| Cloner un projet | `git clone [url-to-git-repo]` |
| Afficher les changements | `git status` |
| Retrouver l'URL du dépôt distant | `git remote -v` |

## Commandes essentielles {auto-animate=true .smaller}

<br>

| Action     | Commande      |
|------------|---------------|
| Ajouter des changements à l'index de `Git` (_stage fixes_) | Un seul fichier : `git add <file-name>` <br> Tous les fichiers déjà indexés : `git add -u` <br> Tous les fichiers :warning: : `git add -A` |

<br>

:::{.callout-important}
## Warning

La méthode `git add -A` peut amener à suivre les modifications
de fichiers qui ne devraient pas l'être (par exemple, des données).

Il est recommandé de bien réfléchir avant de l'utiliser (ou d'avoir
un bon `.gitignore`)

:::

## Commandes essentielles {auto-animate=true}

<br>

| Action     | Commande      |
|------------|---------------|
| Faire un `commit` | `git commit -m "message"`|
| Pousser les changements locaux vers le dépôt distant (branche `master`) | `git push origin master` |
| Récupérer les changements sur le dépôt distant (branche `master`) | `git pull origin master` |

## Modes d'authentification

::: {.nonincremental}
::: {.panel-tabset}

## {{< fa brands github >}}

::: {style="font-size: 75%;"}
- [**https**]{.orange}
  - `git clone https://github.com/username/projet.git`
  - simple à utiliser
  - authentification username + password (ou token) à chaque *push*

- [**ssh**]{.orange}
  - `git clone git@github.com:username/projet.git`
  - (plus) complexe à initialiser
  - authentification automatique 
:::

## {{< fa brands gitlab >}} insee

::: {style="font-size: 75%;"}
- [**https**]{.orange}
  - `git clone https://gitlab.insee.fr/username_or_groupname/projet.git`
  - simple à utiliser
  - authentification username + password (ou token) à chaque *push*

- [**ssh**]{.orange}
  - `git clone git@gitlab.insee.fr:username_or_groupname/projet.git`
  - (plus) complexe à initialiser
  - authentification automatique 
:::

:::
:::



{{< include applications_git/_application0.qmd >}}


{{< include applications_git/_application1.qmd >}}


{{< include applications_git/_application2.qmd >}}


## Bonnes pratiques {auto-animate=true .smaller}

__Que versionne-t-on ?__

- Essentiellement du [**code source**]{.orange}
- [__Pas d'outputs__]{.orange} (fichiers `.html`, `.pdf`, modèles...)
- [__Pas de données__]{.orange}, d'informations locales ou sensibles

. . .

:::{.callout-note}

Pour définir des règles qui évitent de _committer_ tel ou tel fichier, on utilise
un fichier nommé __`.gitignore`__.

Si on mélange du code et des éléments
annexes (_output_, données...) dans un même dossier, il [__faut consacrer du temps à ce fichier__]{.orange}.

Des modèles de `.gitignore` existent sur internet, par exemple [celui-ci](https://www.toptal.com/developers/gitignore)
pour les projets {{< fa brands r-project >}}.

N'hésitez pas à y ajouter des règles conservatrices (par exemple `*.csv`), 
comme cela est expliqué dans [la documentation `utilitR`](https://book.utilitr.org/03_Fiches_thematiques/Fiche_git_utilisation.html#gitignore).

:::

## Bonnes pratiques {auto-animate=true .smaller}

__Format des commits__

::: {layout="[40,60]"}

- [**Fréquence**]{.orange}
    - Aussi souvent que possible
    - Le lot de modifications doit "avoir du sens"
- [**Messages**]{.orange}
    - Courts et informatifs (comme un titre de mail)
    - Décrire **le pourquoi plutôt que le comment** dans le texte

![](img/titre-commit.png)

:::


{{< include applications_git/_application3.qmd >}}

