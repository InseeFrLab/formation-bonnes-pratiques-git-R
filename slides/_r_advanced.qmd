# IV- Environnements reproductibles

## Exp√©rience de pens√©e

::: {.incremental}
- Imaginons la situation suivante :
  - J'installe une version de `R` sur mon poste
  - Je d√©veloppe un projet en installant les _packages_ n√©cessaires
  - Une fois termin√©, je passe au projet suivant, et ainsi de suite.


- Quels [**probl√®mes**]{.orange} puis-je rencontrer au fil des projets ?

- Est-il facile de [**partager**]{.orange} un de mes projets ?
:::

## Enjeux

- [**Version de**]{.orange} [**R**]{.blue2} [**fixe**]{.orange}, celle de l'installation syst√®me

. . .

- [**Conflits de version**]{.orange} : diff√©rents projets peuvent requ√©rir diff√©rentes versions d'un m√™me _package_.

. . .

- [**Reproductibilit√© limit√©e**]{.orange} : difficile de dire quel projet n√©cessite quel _package_.

. . .

- [**Portabilit√© limit√©e**]{.orange} : difficile de pr√©ciser dans un fichier les d√©pendances sp√©cifiques √† un projet.


## Des environnements reproductibles avec `renv`

- `renv` permet de cr√©er des **env**ironnements **r**eproductibles

. . .

- [**Isolation**]{.orange} : chaque projet dispose de sa propre librairie de packages

. . .

- [**Reproductibilit√©**]{.orange} : `renv` enregistre les versions exactes des *packages* n√©cessaires au projet

. . .

- [**Portabilit√©**]{.orange}: un tiers peut ex√©cuter le projet avec les m√™mes sp√©cifications

## Utilisation de `renv`

1. [**Initialisation**]{.orange} (`init`) de l'environnement local du projet

. . .

2. [**D√©veloppement**]{.orange} du projet

. . .

3. [**Enregistrement**]{.orange} (`snapshot`) des versions des *packages* install√©s

. . .

4. [**Restauration**]{.orange} (`restore`) d'un environnement

## :one: Initialisation de l'environnement

::: {.incremental}
- `renv::init()` dans un projet RStudio cr√©e :
  - Un dossier `renv` et le fichier `.Rprofile` : activation automatique de l'environnement
  - Le fichier `renv.lock` : versions des *packages* install√©s
:::

. . .

![](img/renv_init.png){height="400" fig-align="center"}

## :two: D√©veloppement du projet

::: {.incremental}
- Une fois l'environnement initialis√©, on d√©veloppe le projet de mani√®re habituelle :
  - Installations/suppressions/mises √† jour de packages
  - Ecriture de scripts
:::

. . .

- `renv::status()` : indique les _packages_ install√©s/supprim√©s par rapport au fichier `renv.lock`

## :three: Enregistrement de l'environnement {.smaller}

- `renv::snapshot()` : enregistre les versions des _packages_ install√©s dans le fichier `renv.lock`
- Ne pas oublier de committer le fichier `renv.lock`!

. . .

![](img/renv_snapshot.png){height="350" fig-align="center"}

## :four: Restauration de l'environnement

- `renv::restore()` : installe/d√©sinstalle les _packages_ n√©cessaires pour arriver √† l'√©tat sp√©cifi√© dans le fichier `renv.lock`

. . .

- [**Portabilit√©**]{.orange} : un tiers peut recr√©er un environnement avec les m√™mes sp√©cifications


{{< include applications_r/_application4.qmd >}}


## Vers une reproductibilit√© optimale

::: {.incremental}
- [**Limites**]{.orange} des environnements virtuels : 
  - Les [**librairies syst√®me**]{.blue2} ne sont pas g√©r√©es
  - Lourdeur de la phase d'installation √† chaque changement d'environnement
  - Peu adapt√©s √† un environnement de production
:::

. . .

- La [**conteneurisation**]{.orange} (ex : `Docker`) apporte la solution

. . .

- [**Intuition**]{.orange} : au lieu de distribuer la recette pour recr√©er l'environnement, [**distribuer directement une "machine" qui contient *tout* l'environnement n√©cessaire au projet**]{.blue2}

## Ressources suppl√©mentaires

- La [documentation officielle de `renv`](https://rstudio.github.io/renv/articles/renv.html)

- La [fiche utilitR sur la gestion des d√©pendances](https://www.book.utilitr.org/03_fiches_thematiques/fiche_gerer_dependances)

# V- *Pipelines* de donn√©es

## Motivations

- Une analyse de donn√©es ou une cha√Æne de production font intervenir des [**√©tapes standardis√©es**]{.orange}

- Ces √©tapes peuvent √™tre formalis√©es sous forme d'un [**pipeline (*direct acyclic graph*)**]{.orange}

![](img/dag_argo.png)

[Source](https://medium.com/hashmapinc/building-ml-pipelines-8e27344a42d2)

## Motivations

-  Mod√©liser ces √©tapes sous forme de [**pipeline (*direct acyclic graph*)**]{.orange} a plusieurs avantages :

::: {.incremental}
  - [**D√©couplage**]{.blue2} des diff√©rentes √©tapes
  - Facilite la [**planification**]{.blue2} du traitement
  - Facilite la [**prise en main**]{.blue2} du projet par un tiers
:::


## Le package `targets`

- `targets` est un *framework* de mod√©lisation de *pipelines* sp√©cifiquement d√©di√© aux projets `R`.

::: {.incremental}
- Deux objectifs majeurs : 
  1. [**R√©duire le co√ªt d'exp√©rimentation**]{.orange} en sauvegardant les r√©sultats interm√©diaires (***targets***)
  2. Garantir la [**reproductibilit√©**]{.orange} de la cha√Æne en tra√ßant les changements de ces ***targets***
:::

## M√©thode de travail avec `targets` {.smaller}

- On d√©veloppe dans des scripts :
    + Fonctions dans un ou plusieurs fichiers d√©di√©s
    + Cha√Æne de production dans un fichier `_targets.R`

. . .
    
- On g√®re l'ex√©cution du _pipeline_ directement dans la console
    + `tar_visnetwork()` pour inspecter la structure du _pipeline_
    + `tar_make` pour ex√©cuter la chaine de production
    
::: {.callout-note}

Quand on part du chaine de traitement dans un fichier d√©ja existant
(`script.R` par exemple), il faut faire la transition vers un fichier
`_targets.R` dont la structure est particuli√®re.

:::

## :one: Un projet minimaliste {.smaller}

- Structure de projet _opinionated_ :
    + ~~Long script `script.R`~~ `_targets.R`
    + Cha√Æne de production: suite d'appels √† des fonctions d√©finies dans `R/functions.R`

<br>

```
‚îú‚îÄ‚îÄ _targets.R
‚îú‚îÄ‚îÄ data
‚îÇ   ‚îú‚îÄ‚îÄ raw
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ data.csv
‚îú‚îÄ‚îÄ R
‚îÇ   ‚îî‚îÄ‚îÄ functions.R
```

. . .

<br>

- Nouveau fichier: `_targets.R`
    + Contr√¥le le comportement de notre chaine de traitement
    + Encha√Ænement d'√©tapes de transformation de donn√©es selon une syntaxe particuli√®re

## :two: Le fichier `_targets.R` {.smaller}

::: {.incremental}
- Le fichier `_targets.R` doit satisfaire plusieurs conditions :
  1. Charger le _package_ `targets`
  2. Charger dans l'environnement les fonctions n√©cessaires
  3. D√©clarer les _packages_ n√©cessaires aux diff√©rentes √©tapes
  4. D√©finir le *pipeline*.
:::

. . . 

```r
# _targets.R file
library(targets)
source("R/functions.R")
tar_option_set(packages = c("readr", "dplyr", "ggplot2"))
list(
  tar_target(file, "data.csv", format = "file"),
  tar_target(data, get_data(file)),
  tar_target(model, fit_model(data)),
  tar_target(plot, plot_model(model, data))
)
```

::: {.callout-note}
Les fonctions `get_data`, `fit_model` et `plot_model` sont d√©finies
dans üìÅ `R/functions.R`
:::

## :three: Inspecter le *pipeline*

- La fonction `tar_visnetwork` permet de visualiser le *pipeline*

![](img/pipeline.png){height="350" fig-align="center"}

## :three: Ex√©cuter le *pipeline* {.smaller}

- La fonction `tar_make` ex√©cute le *pipeline* d√©fini dans `_targets.R`

![](img/pipeline_run1.png){height="200" fig-align="center"}

- üí° Lors des ex√©cutions suivantes, `targets` saute automatiquement les √©tapes qui n'ont pas chang√©

![](img/pipeline_run2.png){height="150" fig-align="center"}

## Ressources suppl√©mentaires

- La [documentation officielle de `targets`](https://books.ropensci.org/targets/)

- La [fiche UtilitR d√©di√©e √† `targets`](https://www.book.utilitr.org/03_fiches_thematiques/fiche_targets)


{{< include applications_r/_application5.qmd >}}



# VI- Publication reproductible

## Enjeux

- Produire des [**√©tudes reproductibles**]{.orange} en int√©grant le code et le texte dans un m√™me document

. . .

- La g√©n√©ration compl√®te de l'√©tude est contenue dans un [**unique projet**]{.orange}

. . .

- [**Limiter les risques d'erreurs**]{.orange} dues aux gestes manuels

. . .

- Gestion native de [**diff√©rents formats**]{.orange} pour le document final (`pdf`, `html`, `odt`, etc.)

## `R Markdown`

::: {.incremental}
- `R Markdown` est un *package* `R` qui permet de lier
  - Du [**texte**]{.orange} au format `Markdown`
  - Du [**code**]{.orange} `R` qui peut √™tre ex√©cut√© et dont les sorties peuvent √™tre int√©gr√©es au texte
:::

. . .

- [**Dissociation du fond et de la forme**]{.orange} du document

::: {.incremental}
- Un document est [**compil√©**]{.orange} en deux √©tapes
  - [***knit***]{.green2} : le package `knitr` transforme le texte et les sorties `R` en un document `Markdown` standard
  - [***convert***]{.green2} : le logiciel `pandoc` transforme le document `.md` en un format de sortie standard (`html`, `pdf`, etc.)
:::

## `Quarto`

- `Quarto` est le successeur de `R Markdown`

. . .

- `Quarto` supporte [**diff√©rents moteurs de calcul**]{.orange} (`knitr`, `Jupyter`, `Observable`..) ce qui le rend nativement [**multi-langage**]{.orange} (`R`, `Python`, `JavaScript`..)

. . .

- Le fonctionnement des deux syst√®mes reste tr√®s proche

## Anatomie d'un document reproductible

![](img/qmd.png){height="500" fig-align="center"}

## Ressources suppl√©mentaires

- La [documentation officielle de `R Markdown`](https://rmarkdown.rstudio.com/lesson-1.html)

- La [fiche `UtilitR` sur `R Markdown`](https://www.book.utilitr.org/rmarkdown.html)

- La [documentation officielle de `quarto`](https://quarto.org/)


{{< include applications_r/_application6.qmd >}}
