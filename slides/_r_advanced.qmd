# IV- Environnements reproductibles

## Expérience de pensée

- Imaginons la situation suivante :
  - J'installe une version de `R` sur mon poste
  - Je développe un projet en installant les _packages_ nécessaires
  - Une fois terminé, je passe au projet suivant, et ainsi de suite.


- Quels [**problèmes**]{.orange} puis-je rencontrer au fil des projets ?

- Est-il facile de [**partager**]{.orange} un de mes projets ?

## Enjeux

- [**Version de**]{.orange} [**R**]{.blue2} [**fixe**]{.orange}, celle de l'installation système


- [**Conflits de version**]{.orange} : différents projets peuvent requérir différentes versions d'un même _package_.


- [**Reproductibilité limitée**]{.orange} : difficile de dire quel projet nécessite quel _package_.


- [**Portabilité limitée**]{.orange} : difficile de préciser dans un fichier les dépendances spécifiques à un projet.


## Des environnements reproductibles avec `renv`

- `renv` permet de créer des **env**ironnements **r**eproductibles


- [**Isolation**]{.orange} : chaque projet dispose de sa propre librairie de packages


- [**Reproductibilité**]{.orange} : `renv` enregistre les versions exactes des *packages* nécessaires au projet


- [**Portabilité**]{.orange}: un tiers peut exécuter le projet avec les mêmes spécifications

## Utilisation de `renv`

1. [**Initialisation**]{.orange} (`init`) de l'environnement local du projet


2. [**Développement**]{.orange} du projet


3. [**Enregistrement**]{.orange} (`snapshot`) des versions des *packages* installés


4. [**Restauration**]{.orange} (`restore`) d'un environnement

## :one: Initialisation de l'environnement

- `renv::init()` dans un projet RStudio crée :
  - Un dossier `renv` et le fichier `.Rprofile` : activation automatique de l'environnement
  - Le fichier `renv.lock` : versions des *packages* installés

. . .

![](img/renv_init.png){height="400" fig-align="center"}

## :two: Développement du projet

- Une fois l'environnement initialisé, on développe le projet de manière habituelle :
  - Installations/suppressions/mises à jour de packages
  - Ecriture de scripts

- `renv::status()` : indique les _packages_ installés/supprimés par rapport au fichier `renv.lock`

## :three: Enregistrement de l'environnement {.smaller}

- `renv::snapshot()` : enregistre les versions des _packages_ installés dans le fichier `renv.lock`

- Ne pas oublier de committer le fichier `renv.lock`!

. . .

![](img/renv_snapshot.png){height="350" fig-align="center"}

## :four: Restauration de l'environnement

- `renv::restore()` : installe/désinstalle les _packages_ nécessaires pour arriver à l'état spécifié dans le fichier `renv.lock`


- [**Portabilité**]{.orange} : un tiers peut recréer un environnement avec les mêmes spécifications


{{< include applications_r/_application4.qmd >}}


## Vers une reproductibilité optimale

- [**Limites**]{.orange} des environnements virtuels : 
  - Les [**librairies système**]{.blue2} ne sont pas gérées
  - Lourdeur de la phase d'installation à chaque changement d'environnement
  - Peu adaptés à un environnement de production


- La [**conteneurisation**]{.orange} (ex : `Docker`) apporte la solution


- [**Intuition**]{.orange} : au lieu de distribuer la recette pour recréer l'environnement, [**distribuer directement une "machine" qui contient *tout* l'environnement nécessaire au projet**]{.blue2}

## Ressources supplémentaires

- La [documentation officielle de `renv`](https://rstudio.github.io/renv/articles/renv.html)

- La [fiche utilitR sur la gestion des dépendances](https://book.utilitr.org/03_Fiches_thematiques/Fiche_gerer_dependances)








# V- `R` en production

## `R` : un langage de production ?

- R est un langage statistique, dédié à l'analyse interactive

- Moins d'outils de développement que dans d'autre langages (Python)

- L'éco-système tidyverse s'oriente de plus en plus vers des outils production-ready
  - Objectif : présenter les outils et les possibilités

## De quoi parle-t-on ?

- Production informatique

- Production statistique

- Self de production

## Les trois commandemements d'Hadley

- Le code de production a trois caractéristiques
  - "Not just me"
  - "Not just once"
  - "Not just my computer"

. . .

![](img/hadley.jpg){height="250" fig-align="center"}

## Plan de la partie

- "Not just me"

- "Not just once"

- "Not just my computer"

## "Not just me"

- Utilisation de Git

- Traçabilité du projet

- Travail collaboratif
  - Outils de collaboration de l'écosystème Git
  - Organisations hybrides self/dev/prod

## "Not just me"

- Penser à la maintenabilité

- Bonnes pratiques de code

- Standards communautaires
  - Formats de données interopérables : `Parquet`
  - Choix des packages : cf UtilitR

## "Not just me"

- Production -> stabilité

- Gérer les évolutions
  - Packages

- Tests unitaires
  - `testthat`

- Monitoring

## "Not just once"

- Les dépendances changent

- Spécifier et distribuer l'environnement
  - renv + Git

## "Not just once"

- L'environnement change (OS, librairies système, version de R, etc.)

- Conteneurisation pour spécifier plus globalement
  - LS3

## "Not just once"

- Les données changent

- Factoriser pour éviter la duplication

- Modélisation sous forme de DAG
  - Dans le code
  - Targets

## "Not just once"

- Les données changent

- Contrôle de qualité/validité
  - `pointblank`

## "Not just my computer"

## Ressources supplémentaires

- Une [conférence](https://www.youtube.com/watch?v=BQk2-3inViM) d'Hadley Wickham (en anglais)

- Les notes de ["R in production"](https://r-in-production.org/) d'Hadley Wickham (en anglais et en construction)
